// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // Custom fields
    role        GlobalRole   @default(CUSTOMER)
    username    String?      @unique
    memberships Membership[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Multitenacy in this Schema was highly inspired by the following article from BlitzJS.
// Source: https://blitzjs.com/docs/multitenancy
// Also See: https://blog.bullettrain.co/teams-should-be-an-mvp-feature/
//
// – The Organization is the "God" model which owns everything for an account
// – An Organization has many Users through Membership
// – Every other model in the system has an organizationId to indicate who owns it.
// – A User can have access to multiple Organizations
// – When assigning an entity to a user, like a task, assign the task to the user's Membership instead of directly to the user. See the Bullet Train blog post linked above for more explanation on this.

model Organization {
    id           Int           @id @default(autoincrement())
    name         String
    logoUrl      String?
    subscription Subscription? // If no subscription is set, the organization is not yet complete.
    membership   Membership[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Subscription {
    id                   Int               @id @default(autoincrement())
    checkoutSessions     CheckoutSession[]
    stripeSubscriptionId String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId Int          @unique // client-reference-id=`${organizationId}` https://stripe.com/docs/payments/checkout/pricing-table#handle-fulfillment-with-the-stripe-api

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CheckoutSession {
    id                      Int    @id @default(autoincrement())
    stripeCheckoutSessionId String

    subscription   Subscription @relation(fields: [subscriptionId], references: [id])
    subscriptionId Int

    createdAt DateTime @default(now())
}

model Membership {
    id   Int            @id @default(autoincrement())
    role MembershipRole @default(USER)

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId Int

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    // When the user joins, we will clear out the name and email and set the user.
    invitedName  String?
    invitedEmail String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([organizationId, invitedEmail])
}

enum MembershipRole {
    OWNER
    ADMIN
    USER
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data
enum GlobalRole {
    SUPERADMIN
    ADMIN
    CUSTOMER
}

model Contact {
    id        Int      @id @default(autoincrement())
    firstName String
    lastName  String
    email     String
    phone     String?
    subject   String   @db.Text
    message   String   @db.Text
    createdAt DateTime @default(now())
}
